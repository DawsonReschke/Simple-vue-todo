{"remainingRequest":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/src/components/newtodo.vue?vue&type=style&index=0&id=2c466906&scoped=true&lang=css&","dependencies":[{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/src/components/newtodo.vue","mtime":1633933004964},{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmxpbmUtdGhyb3VnaHsKICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoOwp9CgouaGlkZGVuLWhvdmVyewogICAgZGlzcGxheTogbm9uZTsKfQoudG9kby1saXN0IGE6aG92ZXIgLmhpZGRlbi1ob3ZlcnsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgCiAgICBwYWRkaW5nLWlubGluZTogNDEwcHg7CiAgICB3aWR0aDogNjAwcHg7IAogICAgdGV4dC1hbGlnbjogbGVmdDsKICAgIH0KLnRvZG8tc3R5bGV7CiAgICB0ZXh0LWFsaWduOiBsZWZ0Owp9CgouY2hpbGR7CiAgICBmbG9hdDogbGVmdDsgCiAgICB3aWR0aDogMzMuMzMlOwp9CgouY2F0LWNvbnRhaW5lcnsKICAgICAvKiBib3JkZXI6IDJweCBzb2xpZCByZWQ7ICovCiAgICAgZmxvYXQ6Y2VudGVyOwogICAgcGFkZGluZzogMTBweDsKfQoKCg=="},{"version":3,"sources":["newtodo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"newtodo.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"new-todo\">\n        <input placeholder=\"Title\" v-model=\"currentTodoName\">\n        <br>\n        <textarea style=\"float: center;\" placeholder=\"Description\" v-model=\"currentTodoDesc\"></textarea>\n        <br>    \n        <button @click.prevent=\"submitTodo\"> {{isNew ? ButtonStrs[1] : ButtonStrs[0]}} </button>\n        <br>\n        <div class=\"todo-list\">\n            <div class=\"cat-container\">\n                <div class=\"child\">\n                <Category class=\"category\" :cat=\"'Vuejs'\" :todos=\"todos\"/>\n                </div><div class=\"child\">\n                <Category class=\"category\" :cat=\"'Nodejs'\" :todos=\"todos\"/>\n                </div><div class=\"child\">\n                <Category class=\"category\" :cat=\"'Processing'\" :todos=\"todos\"/>\n                </div>\n                \n            </div>\n            <!-- <ul> \n                <li class=\"todo-style\" v-for=\"(item, index) in todos\" :key=\"item.id\">  \n                    <a>\n                        <sup>{{item.timeTag}}</sup><a  v-bind:class=\"getClass(item)\"  @click=\"completeTodo(index)\"> {{item.title}}</a>\n                        <button @click=\"deleteTodo(index)\"> delete   </button>\n                        <button @click=\"changeTodo(index)\"> change </button>\n                     <h1 class=\"hidden-hover\"> {{item.description}} </h1>\n                    </a>\n                </li>\n            </ul> -->\n        </div>\n        <!-- <input type=\"textarea\" v-model=\"currentTodoDesc\"> -->\n    </div>\n</template>\n\n<script>\nimport Category from \"./cat-components/category.vue\"\n\nexport default {\n    name: \"NewTodo\",\n    data() { \n        return{\n            mainURL : 'http://localhost:3030/api/v1',\n            isNew: true,\n            ButtonStrs: [\"submit changes\", \"create new Todo\"],\n            currentTodoName: \"\",\n            currentTodoID: 0,\n            currentTodoDesc: \"\",\n            currentTodoTime: 5,\n            todos: [],\n        }\n    },\n    components:{\n        Category,\n    },\n    filters: {\n    },\n    computed:{\n    },\n    methods: {\n        OrderBy(){\n            let completed = []\n            let temp = []; \n            for(let i = 0; i < this.todos.length; i++){\n                if(this.todos[i].completed == true){\n                    completed.push(this.todos[i]); \n                }else{\n                    temp.push(this.todos[i]); \n                }\n            }\n            for(let k = 0; k < completed.length; k++){\n                temp.push(completed[k]); \n            }\n            return temp; \n        },\n        getClass(val){\n            return val.completed ? 'line-through' : ''; \n        },\n        async getData() { \n            try{\n                let response = await fetch(this.mainURL);\n                this.todos = await response.json();\n                this.todos = this.OrderBy(); \n                console.log(this.todos); \n            }catch(error){\n                console.log(error); \n            }\n        },\n        deleteTodo(val){\n            const id = this.todos[val]._id; \n            const URL = `${this.mainURL}/${id}`;\n            const data = {}; \n            this.XHR(data,\"DELETE\",URL);\n        },\n        changeTodo(val){\n            this.isNew = false; \n            this.setCurrentTodo(val);                      \n        },\n        completeTodo(val){\n            this.setCurrentTodo(val); \n            this.currentTodoCompleted = !this.currentTodoCompleted;\n            this.submitChangedTodo();\n        },\n        submitTodo() { \n            if(this.isNew){\n                this.saveCurrentTodo(); \n            }else{\n                this.submitChangedTodo(); \n            }\n        },\n        // function for changing the data in the todo \n        //such as title, description \n        submitChangedTodo(){\n            const data = { \n                title: this.currentTodoName,\n                description: this.currentTodoDesc,\n                timeTag: this.currentTodoTime,\n                completed: this.currentTodoCompleted,\n            }\n            console.log(this.currentTodoDesc)\n            const URL = `${this.mainURL}/${this.currentTodoID} `\n            this.XHR(data,\"PUT\", URL)\n        },\n        saveCurrentTodo() { \n            const data = { \n                title: this.currentTodoName,\n                description: this.currentTodoDesc,\n                timeTag: this.currentTodoTime\n            }\n            this.XHR(data, \"POST\", this.mainURL,)\n        },\n        setCurrentTodo(val){\n            this.currentTodoName = this.todos[val].title;\n            this.currentTodoDesc = this.todos[val].description;\n            this.currentTodoCompleted = this.todos[val].completed;\n            this.currentTodoID = this.todos[val]._id; \n        },\n        resetForm(){\n        // console.log(\"this form should reset\"); \n            this.currentTodoName = \"\"; \n            this.currentTodoDesc = \"\"; \n            this.currentTodoTime = 5; \n            this.currentTodoCompleted = false; \n            this.currentTodoID = 0; \n    },\n        XHR(data, type, url){\n            var xhr = new XMLHttpRequest();\n            xhr.open(type,url, true);\n            xhr.setRequestHeader('Content-Type', 'application/json');\n            xhr.send(JSON.stringify(data)); \n            setTimeout(this.getData, 500);\n            this.resetForm();\n        },\n    },\n    created() { \n        this.getData(); \n    }\n}\n</script>\n\n\n<style scoped>\n\n.line-through{\n    text-decoration: line-through;\n}\n\n.hidden-hover{\n    display: none;\n}\n.todo-list a:hover .hidden-hover{\n    display: inline-block; \n    padding-inline: 410px;\n    width: 600px; \n    text-align: left;\n    }\n.todo-style{\n    text-align: left;\n}\n\n.child{\n    float: left; \n    width: 33.33%;\n}\n\n.cat-container{\n     /* border: 2px solid red; */\n     float:center;\n    padding: 10px;\n}\n\n\n</style>"]}]}