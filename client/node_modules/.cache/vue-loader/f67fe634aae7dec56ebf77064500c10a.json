{"remainingRequest":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/src/App.vue","mtime":1634345563068},{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dawson/workspace/fiveMinuteChal/nodejs/vue/C_Todo/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojYXBwIHsKICBmb250LWZhbWlseTogQXZlbmlyLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOwogIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwogIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGNvbG9yOiAjMmMzZTUwOwogIG1hcmdpbi10b3A6IDYwcHg7Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- <NewTodo :isChangingTodo=\"isChangingTodo\" :viewIndex=\"viewIndex\"/> -->\n    <div v-if=\"!loading && isChangingTodo\" class=\"change-todo\">\n    <ChangeTodo @changeTodoHandler=\"changeTodoHandler\" :todo=\"todoToChange\"/>\n    </div>\n    <div v-if=\"!isChangingTodo\" class=\"create-todo\">\n   <CreateTodo @CTodoHandler=\"CTodoHandler\" :categories=\"categories\"/>\n    </div>\n    <br>\n    <DisplayTodo @catHandler=\"catHandler\" :categories=\"categories\"/>\n    <!-- <img alt=\"Vue logo\" src=\"./assets/logo.png\"> -->\n  </div>\n</template>\n\n<script>\n  // import NewTodo from \"./components/newtodo.vue\"\n  import CreateTodo from \"./components/create-todo.vue\"\n  import DisplayTodo from \"./components/display-todo.vue\"\n  import ChangeTodo from \"./components/change-todo.vue\"\nexport default {\n  name: 'App',\n  data(){\n    return{\n      apiURL: 'http://localhost:3030/api/v1', \n      categories: [],\n      isChangingTodo: false,\n      todoToChange: [],\n      loading: true,\n    }\n  },\n  created(){\n    this.getData(); \n    console.log(\"created at\");\n  },\n  components: {\n    // NewTodo,\n    CreateTodo,\n    DisplayTodo,\n    ChangeTodo,\n  },\n  methods:{\n     async getData() { \n       console.log('getting data'); \n       try {\n         let response = await fetch(this.apiURL); \n         this.categories = await response.json(); \n         console.log(this.categories); \n       } catch (error) {\n         console.log(error);\n       }\n       this.loading = false; \n            // try{\n            //     let response = await fetch(this.mainURL);\n            //     this.categories = await response.json();\n            //     console.log(response); \n            // }catch(error){\n            //     console.log(error); \n            // } \n    },\n    CTodoHandler(type){\n      switch(type){\n        case('reload'):\n        setTimeout(this.getData,250); \n        this.resetForm();\n        break; \n      }\n    },\n    changeTodoHandler(type, todo,id){\n      switch(type){\n        case('submitChanges'):\n        console.log(\"todo: \",todo, \" id: \", id);\n          //create put request (todo); \n          this.isChangingTodo = false; \n          this.todoToChange = [];\n          /*\n          data to send : {\n            category: string,\n            list: [{},{}]\n          }\n          */\n         this.XHR(todo,'PUT',`${this.apiURL}/${id}`)\n          setTimeout(250); \n          this.getData(); \n        break;\n        case('cancelChanges'): \n          this.resetForm(); \n        break; \n      }\n    },\n    catHandler(type,todo){\n      console.log(\"catHandler\"); \n//if change : todo is now an integer: the todo index rather\n      switch(type){\n        case('complete'):/*creates a put request to swap complete to !complete*/ \n          console.log(todo);\n          break;\n        case('delete'):/*creates a delete request for {_id : todo.id}*/ \n        console.log(todo);\n          this.XHR(todo[1],'DELETE',`${this.apiURL}/${todo[0]}`)\n          break;\n        case('change'):/*changes the createTodo to a changeTodo with todo = todos[todo]*/ \n            this.isChangingTodo = true;\n            this.todoToChange = todo; \n            this.loading = true; \n            this.loading = false; \n            console.log(this.todoToChange);\n          break;\n        }\n    },\n    deleteTodo(todo){\n      //make http request to delete todo with {_id : todo.id}\n      console.log(todo); \n    },\n    changeTodo(todoIndex){\n      //make http put request to change todo with {_id : todo.id} to : {newTodo}\n      this.viewIndex = todoIndex; \n      this.isChangingTodo = true; \n    },\n    viewTodo(todoIndex){\n      //update local varialbe \"viewingIndex\"\n      //wait for emit from \"newtodo\" to clear these..\n      this.viewIndex = todoIndex; \n    },\n    completeTodo(todo){\n      //creates a put request simply seting this todo to complete/incomplete \n      console.log(todo);\n    },\n    clearViewIndex(){\n      this.viewIndex = -1; \n      this.isChangingTodo= false; \n    },\n    XHR(data, type, url){\n      var xhr = new XMLHttpRequest();\n      xhr.open(type,url, true);\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.send(JSON.stringify(data)); \n      setTimeout(this.getData, 250);\n      this.resetForm();\n    },\n    resetForm(){\n      this.todoToChange = [];\n      this.isChangingTodo = false; \n    }\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]}]}